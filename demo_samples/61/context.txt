function checkLocalConstants
	replace[local_variable_declaration]
		Modifiers[repeat modifier] 
		TypeSpecifier[type_specifier] 
		VarDecl[variable_declarators];
	construct AllVarDecl[repeat variable_declarator]
		_[^ VarDecl]
	deconstruct AllVarDecl
		FirstVarDecl[variable_declarator]Remaining[repeat variable_declarator]
	where Modifiers[containFinal]
	where FirstVarDecl[isCompileTime]
	by
		Modifiers[finalToConst][changeProtected]
		TypeSpecifier[changeDataTypes][changeArrayTypes][changeExceptionName]
		VarDecl[changeCSException][changeCSStatement] ;	
end function

function checkLocalRunTimeConstants
	replace[local_variable_declaration]
		Modifiers[repeat modifier] 
		TypeSpecifier[type_specifier] 
		VarDecl[variable_declarators];
	construct AllVarDecl[repeat variable_declarator]
		_[^ VarDecl]
	deconstruct AllVarDecl
		FirstVarDecl[variable_declarator]Remaining[repeat variable_declarator]
	where Modifiers[containFinal]
	where not FirstVarDecl[isCompileTime]
	by
		Modifiers[changeProtected][removeNonCS]%remove final
		TypeSpecifier[changeDataTypes][changeArrayTypes][changeExceptionName]
		VarDecl[changeCSException][changeCSStatement] ;	
end function

function checkLocalBlankConstants
	replace[local_variable_declaration]
		Modifiers[repeat modifier] 
		TypeSpecifier[type_specifier] 
		VarDecl[variable_name];%no initializer
	where Modifiers[containFinal]
	by
		Modifiers[changeProtected][removeNonCS]%remove final
		TypeSpecifier[changeDataTypes][changeArrayTypes][changeExceptionName]
		VarDecl[changeCSException][changeCSStatement] ;	
end function

function checkLocalVars
	replace*[local_variable_declaration]
		Modifiers[repeat modifier] 
		TypeSpecifier[type_specifier] 
		VarDecl[variable_declarators];
		construct AllVarDecl[repeat variable_declarator]
		_[^ VarDecl]
	deconstruct AllVarDecl
		FirstVarDecl[variable_declarator]Remaining[repeat variable_declarator]
	where not Modifiers[containFinal]
	by
		Modifiers[removeNonCSModifiers][changeProtected]
		TypeSpecifier[changeDataTypes][changeArrayTypes][changeExceptionName]
		VarDecl[changeCSException][changeCSStatement] ;	
end function

function changeArrayDimensions 
	replace[local_variable_declaration]
		Modifiers[repeat modifier] 
		DataType[type_name]
		VarName[declared_name]Dim [repeat dimension]VarInit [opt equals_variable_initializer];
	construct NewTypeSpecifier[type_specifier]
		DataType Dim
	by
		Modifiers NewTypeSpecifier VarName VarInit ;
end function

function changeDataTypes
	replace[type_specifier]
		DataType[primitive_type]
	by
		DataType[changePrimDataTypes]
end function

function changeArrayTypes
	replace[type_specifier]
		ArrayType[type_name] Dimentions[repeat dimension+]
		deconstruct *[primitive_type] ArrayType
			PrimType[primitive_type]
	by
		PrimType[changePrimDataTypes]Dimentions
end function

function changeExceptionName
replace *[qualified_name]
	ExceptionName[qualified_name]
import RunTimeExceptionsMapper [ExceptionMapper]
deconstruct * [exceptionTable] RunTimeExceptionsMapper
	ExceptionName -> CSName [qualified_name]
by
	CSName
end function

function changeProtected
	replace * [ repeat modifier]
		'protected
	by
		'internal 'protected
end function

function isCompileTime
	match[variable_declarator]
		VarName[variable_name] '= Value[literal]
end function

function finalToConst
	replace *[repeat modifier]
		CurrentModifier[modifier]
		RemainingModifiers[repeat modifier]
	where CurrentModifier[isFinal]
	by 
		'const
		RemainingModifiers
end function

function changeCSStatement
	replace [expression]
		FirstId[id] '. SecondId[id]'. ThirdId[id]Remaining[repeat component]
	%to search for specified entry in the statemnts table
	construct Key[reference]
		FirstId.SecondId.ThirdId
	import StatementMapping [StmtMapper]
	% match the key entry with C# one
	deconstruct *[table_entry] StatementMapping
		Key -> CSStmt [reference]
	% to build a new valid expression 
	deconstruct CSStmt
		FirstCSId[id] CSRemaining[repeat component]
	%join the method arguements with the new part
	by 
		FirstCSId CSRemaining[. Remaining]
end function

function changeCSException
	replace *[expression]
		exp[expression]
	deconstruct exp
		'new ExceptionName[qualified_name]()
	by
		'new ExceptionName[changeExceptionName]()
end function

rule containFinal
	match [repeat modifier]
	   CurrentModifier[modifier]
	   RemainingModifiers[repeat modifier]
	where CurrentModifier[isFinal]
end rule

rule removeNonCS
	replace [repeat modifier]
	   CurrentModifier[modifier]
	   RemainingModifiers[repeat modifier]
	where CurrentModifier[isFinal][isTransient][isVolatile]
	by
	   RemainingModifiers
end rule

rule removeNonCSModifiers
	replace [repeat modifier]
		CurrentModifier[modifier]
		RemainingModifiers[repeat modifier]
	where CurrentModifier[isTransient][isVolatile]
	by
		RemainingModifiers
end rule



function isFinal
	match [modifier]
		'final
end function

function isTransient
	match [modifier]
		'transient
end function

function isVolatile
	match [modifier]
		'volatile
end function

