function addParameterPointerField F [id] PS [parameterSpec]
    % get the parts of the parameter spec
    deconstruct PS
        parameter ( F , IO [inOut] , TS [typeSpec] , PN [parameterName] ).

    % make the C parameter pointer field declaration
    construct P [typeSpecIndirectParameterNameSemi]
        TS * PN ;

    % now append this parameter field
    replace [repeat typeSpecIndirectParameterNameSemi]
        PL [repeat typeSpecIndirectParameterNameSemi]
    by
        PL [. P]
end function

function addResultPointerField F [id] ORS [opt returnsSpec]
    % for each returns spec
    deconstruct ORS
        returns ( F , TS [typeSpec] , PN [id] ).

    % make the C parameter pointer field declaration
    construct P [typeSpecIndirectParameterNameSemi]
        TS * PN ;

    % now append this parameter field
    replace [repeat typeSpecIndirectParameterNameSemi]
        PL [repeat typeSpecIndirectParameterNameSemi]
    by
        PL [. P]
end function

function addDummyFieldIfNecessary
    replace [repeat typeSpecIndirectParameterNameSemi]
        % nothing
    by
        int * dummy;
end function

function addParameterDeclaration F [id] PS [parameterSpec]
    % get the parts of the parameter spec
    deconstruct PS
        parameter ( F , IO [inOut] , TS [typeSpec] , PN [parameterName] ).

    % make the C parameter declaration
    construct P [typeSpecParameterNameSemi]
        TS PN ;

    % now append this parameter declaration
    replace [repeat typeSpecParameterNameSemi]
        PL [repeat typeSpecParameterNameSemi]
    by
        PL [. P]
end function

function addResultDeclaration F [id] ORS [opt returnsSpec]
    % for each returns spec
    deconstruct ORS
        returns ( F , TS [typeSpec] , PN [id] ).

    % make the C local declaration
    construct P [typeSpecParameterNameSemi]
        TS PN ;

    % now append this parameter declaration
    replace [repeat typeSpecParameterNameSemi]
        PL [repeat typeSpecParameterNameSemi]
    by
        PL [. P]
end function

function addInputParameterBinding F [id] PS [parameterSpec]
    % for each 'in' parameter spec
    deconstruct PS
        parameter ( F , in , TS [typeSpec] , PN [parameterName] ).

    % make the C binding
    construct IPB [inParameterBindingSemi]
        PN = ( TS ) * p -> PN ;

    % now append this parameter binding
    replace [repeat inParameterBindingSemi]
        PBL [repeat inParameterBindingSemi]
    by
        PBL [. IPB]
end function

function addOutputParameterBinding F [id] PS [parameterSpec]
    % for each 'out' parameter spec
    deconstruct PS
        parameter ( F , out , TS [typeSpec] , PN [parameterName] ).

    % make the C binding
    construct OPB [outParameterBindingSemi]
        * p -> PN = ( TS) PN ;

    % now append this parameter binding
    replace [repeat outParameterBindingSemi]
        PBL [repeat outParameterBindingSemi]
    by
        PBL [. OPB]
end function

function addFailCondition F [id] OFS [opt failsSpec]
    % check for a fail condition
    deconstruct OFS
        'fails ( F , C [stringlit] ) .
    construct FC [id]
        'NONE
    replace [returnCode]
        'return (0);
    by
        'return ( FC [unquote C] );
end function



function addInputParameter F [id] PS [parameterSpec]
    % for each 'in' parameter spec
    deconstruct PS
        parameter ( F , in , TS [typeSpec] , PN [parameterName] ).
    replace [functionCallSemi]
        OPNE [opt outParameterNameEquals] F ( PL [list parameterName] );
    by
        F ( PL [, PN] );
end function

