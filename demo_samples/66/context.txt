function expandConstants
    replace * [TypeUnitSpec]
        types T [Ident] ;
            TUB [StatementList]
        'end OT [opt Ident] .
    by
        types T ;
            TUB     [constsFirst] [resolveConsts]
        'end OT .
end function

function expandTypes
    replace * [TypeUnitSpec]
        types T [Ident] ;
            TUB [StatementList]
        'end OT [opt Ident] .
    by
        types T ;
            TUB     [typesFirst] [resolveTypes]
        'end OT .
end function

function nameStructurallyEquivalentTypes
    replace * [TypeUnitSpec]
        types T [Ident] ;
            TUB [StatementList]
        'end OT [opt Ident] .
    by
        types T ;
            TUB     [nameOneStructurallyEquivalentType]
        'end OT .
end function

rule expandGenerics
    replace [TypeUnitSpec]
        types T [Ident] ;
            TUB [StatementList]
        'end OT [opt Ident] .
    construct NewTUB [StatementList]
        TUB     [normalizeGenerics]
                [genericsFirst]
                [resolveGenerics]
    where not
        NewTUB [= TUB]
    by
        types T ;
            NewTUB
        'end OT .
end rule

rule cleanup
    replace [repeat Statement]
        ;
        MoreS [repeat Statement]
    by
        MoreS
end rule

function resolveConsts
    replace * [repeat Statement+]
        CD [ConstDef] ;
        MoreS [repeat Statement]
    deconstruct CD
        Cid [Ident] == Cexpr [Expr]
    by
        CD ;
        MoreS [substituteConstValue Cid Cexpr] [resolveConsts]
end function

rule constsFirst
    replace [repeat Statement+]
        S [Statement] 
        CD [ConstDef] ;
        MoreS [repeat Statement]
    where not
        S [isConstDef] 
    by
        CD ;
        S
        MoreS
end rule

function resolveTypes
    replace * [repeat Statement+]
        TD [TypeClause] ;
        MoreS [repeat Statement]
    deconstruct TD
        Tid [Ident] = Ttype [Type]
    by
        TD ;
        MoreS [substituteTypeDef Tid Ttype] [resolveTypes]
end function

rule typesFirst
    replace [repeat Statement+]
        S [Statement] 
        TD [TypeClause] ;
        MoreS [repeat Statement]
    where not
        S [isTypeClause] 
    by
        TD ;
        S
        MoreS
end rule

rule nameOneStructurallyEquivalentType
    replace [repeat Statement+]
        TD [TypeClause] ;
        MoreS [repeat Statement]
    deconstruct TD
        Tid [id] = Ttype [Type]
    where not
        Ttype [isSimpleType] 
    where
        MoreS [hasAnotherTypeDefLike Ttype]
    construct Tprime [id]
        Tid [!]
    by
        Tprime = Ttype ;
        Tid = Tprime ;
        MoreS [substituteTypeId Ttype Tprime]
end rule

function normalizeGenerics
    replace [StatementList]
        SL [StatementList]
    by
        SL [addMissingGenericTypeParameters] 
            [addMissingGenericValueParameters]
end function

rule genericsFirst
    % put all generics first, regardless of present position
    replace [repeat Statement+]
        S [Statement]
        T [TypeClause] ;
        MoreS [repeat Statement]
    where
        T [isGeneric]
    where not
        S [isGeneric]
    by
        T ;
        S
        MoreS
end rule

rule resolveGenerics
    replace [repeat Statement+]
        G [Ident] '[ TP [list IdentDefaultType+] '] ( VP [list IdentDefaultExpr+] ) = GB [Type] ;
        MoreS [repeat Statement]
    by
        ; MoreS [resolveGeneric G TP VP GB]
end rule

rule substituteConstValue  Cid [Ident]  Cvalue [Expr]
    replace [Expr]
        Cid
    by
        Cvalue
end rule

function isConstDef
    match [Statement]
        CD [ConstDef] ;
end function

rule substituteTypeDef  Tid [Ident]  Ttype [Type]
    replace [Type]
        Tid
    by
        Ttype
end rule

function isTypeClause
    match [Statement]
        TD [TypeClause] ;
end function

function isSimpleType
    match [Type]
        ST [SimpleType]
end function

rule hasAnotherTypeDefLike Ttype [Type]
    match [Type]
        Ttype
end rule

rule substituteTypeId Ttype [Type] Tid [id]
    replace [Type]
        Ttype
    by
        Tid
end rule

rule addMissingGenericTypeParameters
    replace [repeat Statement+]
        G [Ident] FP [FormalParamPart] = GB [Type] ;
        MoreS [repeat Statement]
    deconstruct G 
        Gid [id]
    construct NewParmId [Ident]
        Gid [!]
    by
        G '[ NewParmId '] FP = GB ;
        MoreS  [addDummyTypeParam G]
end rule

rule addMissingGenericValueParameters
    replace [repeat Statement+]
        G [Ident] GP [GenericPart] = GB [Type] ;
        MoreS [repeat Statement] 
    deconstruct G 
        Gid [id]
    construct NewParmId [Ident]
        Gid [!]
    by
        G GP ( NewParmId ) = GB ;
        MoreS  [addDummyValueParam G]
end rule

rule isGeneric
    match [TypeClause]
        G [Ident] GP [GenericPart] GFP [FormalParamPart] = GB [Type] 
end rule

rule resolveGeneric     G [Ident] TPL [list IdentDefaultType+] VPL [list IdentDefaultExpr+] GB [Type]
    replace [Type]
        G '[ ITPL [list SimpleType+] '] ( IVPL [list Expr+] )
    by
        GB [substituteTypeParameters each TPL ITPL] 
             [substituteValueParameters each VPL IVPL]
end rule

rule addDummyTypeParam G [Ident]
    replace [SimpleType]
        G ( GVP [ExprList] )
    by
        G '[ int '] ( GVP )
end rule



rule substituteTypeParameters GTP [IdentDefaultType] ITP [SimpleType]
    deconstruct GTP
        GTPid [Ident]
    replace [SimpleType]
        GTPid
    by
        ITP
end rule

rule substituteValueParameters GVP [IdentDefaultExpr] IVP [Expr]
    deconstruct GVP
        GVPid [Ident]
    replace [Expr]
        GVPid
    by
        IVP
end rule

