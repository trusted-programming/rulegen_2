function removeSemiColon
    replace [expression_statement]
	E [expression] ';
    by
	E [changeExpression]
end function

function removeAmpersand
    replace * [cast_expression]
	'& CE [cast_expression]
    by
	CE
end function

function changeAssignment
    replace [expression_statement]
	CE1 [cast_expression] '= CE2 [cast_expression] RBO [repeat binary_operation]
    by
	CE1 ':= CE2 RBO
end function

function changeBasicPrintf
    replace [expression_statement]
	'printf '( SL[stringlit] ')
    by
	'put SL '..
end function

function changeComplexPrintf
    replace [expression_statement]
	'printf '( LE [list assignment_expression+] ')
    construct repeatExpr [repeat assignment_expression]
	_ [. each LE]
    deconstruct repeatExpr
	SL [stringlit] Rest [repeat assignment_expression]
    construct NewArgList [list putArg]
	_ [translatePutArgs SL Rest]			
    construct putStatement [expression_statement]
	'put NewArgList [removeEmptyArg] '..
    by
	putStatement [removeOptDotDot]
end function

function changeBasicScanf
    replace [expression_statement]
	'scanf '( LE [list assignment_expression+] ')
    construct repeatExpr [repeat assignment_expression]
	_ [. each LE]
    deconstruct repeatExpr
	SL [stringlit] Rest [repeat assignment_expression]
    construct listExpr [list assignment_expression]
	_ [, each Rest]
    by
	'get listExpr
end function

function changeStrCopy
    replace [expression_statement]
	ES [expression_statement]
    by
	ES [changeCopyWithLiteral]
	   [changeCopyWithIdentifier]
end function

function changeStrCat
    replace [expression_statement]
	ES [expression_statement]
    by
	ES [changeCatWithLiteral]
	   [changeCatWithIdentifier]
end function

function changePrePlusPlus
    replace [expression_statement]
	'++ ID [identifier]
    by
	ID ':= ID '+ 1
end function

function changePostPlusPlus
    replace [expression_statement]
	ID [identifier] '++ 
    by
	ID ':= ID '+ 1
end function

function changePreMinusMinus
    replace [expression_statement]
	'-- ID [identifier]
    by
	ID ':= ID '- 1
end function

function changePostMinusMinus
    replace [expression_statement]
	ID [identifier] '-- 
    by
	ID ':= ID '- 1
end function

function changeArrayBrackets
    replace * [unary_expression]
	PE [primary_expression] '[ E [expression] ']
    by
	PE '( E ')
end function

rule changeExpression
    construct COps [repeat binary_operator]
        '== '!= '&& '|| '%
    construct TuringOps [repeat binary_operator]
    	'= 'not= 'and 'or 'mod
    replace [expression]
	E [expression]
    construct NewE [expression]
	E [changeOp each COps TuringOps]
	  [changeArrayBrackets]
    deconstruct not NewE
	E 
    by
	NewE 
end rule

function translatePutArgs SL [stringlit] RAE [repeat assignment_expression]			
    replace [list putArg]
	SoFar [list putArg]
    construct beforePercent [stringlit]		% get everything before the next percent
	SL [before "%"] [replaceEmpty SL RAE]
    construct NewSL [putArg]
	beforePercent
    where not					% terminating condition
	beforePercent [?replaceEmpty SL RAE]
    construct afterPercent [stringlit]		% get everything after the percent sign
	SL [after "%"]
    construct restSL [stringlit]		% skip the next character
	afterPercent [: 2 9999] 		% 2nd to last character
    construct RestAE [repeat assignment_expression]
	_ [getRest RAE]
    construct recurse [list putArg]
	_ [translatePutArgs restSL RestAE]  
    by
	SoFar [, NewSL] [addAE RAE] [, recurse]
end function

function removeEmptyArg
    replace * [list_1_putArg]
	"" ', Tail [list_1_putArg]
    by
	Tail 
end function

function removeOptDotDot
    replace [expression_statement]
	'put LPA [list putArg] '..
    construct NewLPA [list putArg]
	LPA [removeNewline]
    %%deconstruct not NewLPA 
    	%%LPA
    by
	'put NewLPA
end function

function changeCopyWithLiteral
    replace [expression_statement]
	'strcpy '( N [identifier] ', SL [stringlit] ')
    by
	N ':= SL
end function

function changeCopyWithIdentifier
    replace [expression_statement]
	'strcpy '( N [identifier] ', N2 [identifier] ')
    by
	N ':= N2
end function

function changeCatWithLiteral
    replace [expression_statement]
	'strcat '( N [identifier] ', SL [stringlit] ')
    by
	N ':= N '+ SL
end function

function changeCatWithIdentifier
    replace [expression_statement]
	'strcat '( N [identifier] ', N2 [identifier] ')
    by
	N ':= N '+ N2
end function

function changeOp COp [binary_operator] TuringOp [binary_operator]
    replace * [binary_operator]
	COp
    by
	TuringOp
end function



function addAE RAE [repeat assignment_expression]
    deconstruct RAE
	AE [assignment_expression] RestAE [repeat assignment_expression]
    replace [list putArg]
	LPA [list putArg]
    construct NewPA [putArg]
	AE
    by
	LPA [, NewPA]
end function

function getRest RAE [repeat assignment_expression]
    replace [repeat assignment_expression]
	Rest [repeat assignment_expression]
    deconstruct RAE
	AE [assignment_expression] RestAE [repeat assignment_expression]
    by
	RestAE
end function

function before SL [stringlit]
    replace [stringlit]
	Scope [stringlit]
    construct N [number]
	_ [index Scope SL]
    construct NewN [number]
	N [- 1]
    by
	Scope [changeNull N]
	      [changeNOTNull 1 NewN]
end function

function after SL [stringlit]
    replace [stringlit]
	Scope [stringlit]
    construct N [number]
	_ [index Scope SL]
    construct NewN [number]
	N [+ 1]
    by
	Scope [changeNull N]
	      [changeNOTNull NewN 9999]
end function

function removeNewline
    replace * [list putArg]
	S [stringlit]
    by
	% nothing
end function

function changeNull N [number]
    replace [stringlit]
	SL [stringlit]
    where
	N [<= 1]
    by
	""
end function

function changeNOTNull N1 [number] N2 [number]
    replace [stringlit]
	SL [stringlit]
    by
	SL [: N1 N2]
end function

